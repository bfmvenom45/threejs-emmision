import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';

export class ModelLoader {
  constructor() {
    this.loader = new GLTFLoader();
    this.loadedModels = new Map(); // –ö–µ—à –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
    this.loadTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ timeout
    this.dracoEnabled = true; // –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é DRACO
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è DRACOLoader –¥–ª—è —Å—Ç–∏—Å–Ω–µ–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
    this.setupDracoLoader();
  }
  
  disableDraco() {
    console.log('üîß –í–∏–º–∏–∫–∞—î–º–æ DRACO –ø—ñ–¥—Ç—Ä–∏–º–∫—É —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏ CDN');
    this.dracoEnabled = false;
    this.loader = new GLTFLoader(); // –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ loader –±–µ–∑ DRACO
  }
  
  setupDracoLoader() {
    try {
      const dracoLoader = new DRACOLoader();
      
      // –°–ø—Ä–æ–±—É—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ CDN –¥–ª—è DRACO decoder
      const decoderPaths = [
        'https://unpkg.com/three@0.160.0/examples/jsm/libs/draco/',
        'https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/libs/draco/',
        'https://threejs.org/examples/jsm/libs/draco/'
      ];
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π CDN
      dracoLoader.setDecoderPath(decoderPaths[0]);
      dracoLoader.setDecoderConfig({ type: 'js' });
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ DRACO loader
      this.loader.setDRACOLoader(dracoLoader);
      
      console.log(`‚úÖ DRACOLoader –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: ${decoderPaths[0]}`);
      console.log('üì¶ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∏—Å–Ω–µ–Ω–∏—Ö GLB —Ñ–∞–π–ª—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–∞');
      
      // –î–æ–¥–∞—î–º–æ cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏
      window.addEventListener('beforeunload', () => {
        try {
          dracoLoader.dispose();
        } catch (e) {
          // Ignore cleanup errors
        }
      });
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è DRACOLoader:', error);
      console.warn('‚ö†Ô∏è –î–µ—è–∫—ñ —Å—Ç–∏—Å–Ω–µ–Ω—ñ –º–æ–¥–µ–ª—ñ –º–æ–∂—É—Ç—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏—Å—è');
      
      // Fallback: –≤–∏–º–∏–∫–∞—î–º–æ DRACO
      this.disableDraco();
    }
  }
  
  async load(modelPath) {
    return new Promise((resolve, reject) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
      if (this.loadedModels.has(modelPath)) {
        console.log(`–ú–æ–¥–µ–ª—å ${modelPath} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ –∫–µ—à—É`);
        const cachedModel = this.loadedModels.get(modelPath);
        resolve(cachedModel.clone());
        return;
      }
      
      console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: ${modelPath}`);
      
      // Timeout –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const timeoutId = setTimeout(() => {
        console.error(`Timeout –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ${modelPath}`);
        reject(new Error(`Timeout –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${modelPath}`));
      }, this.loadTimeout);
      
      this.loader.load(
        modelPath,
        (gltf) => {
          const model = gltf.scene;
          
          if (!model || !model.children || model.children.length === 0) {
            console.warn(`–ú–æ–¥–µ–ª—å ${modelPath} –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä—ñ—ó`);
          }
          
          // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
          this.optimizeModel(model);
          
          // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
          this.loadedModels.set(modelPath, model.clone());
          
          console.log(`–ú–æ–¥–µ–ª—å ${modelPath} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ (${model.children.length} –æ–±'—î–∫—Ç—ñ–≤)`);
          clearTimeout(timeoutId);
          resolve(model);
        },
        (progress) => {
          if (progress.total > 0) {
            const percent = (progress.loaded / progress.total * 100).toFixed(0);
            console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${modelPath}: ${percent}% (${progress.loaded}/${progress.total} bytes)`);
          }
        },
        (error) => {
          clearTimeout(timeoutId);
          
          // –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
          if (error.message && (error.message.includes('DRACO') || error.message.includes('Failed to fetch'))) {
            console.error(`‚ùå DRACO/CDN –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${modelPath}:`, error.message);
            console.log('ÔøΩ –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–µ–∑ DRACO –ø—ñ–¥—Ç—Ä–∏–º–∫–∏...');
            
            // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–µ–∑ DRACO
            this.loadWithoutDraco(modelPath).then(resolve).catch(() => {
              // –Ø–∫—â–æ —ñ —Ü–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, —Å–ø—Ä–æ–±—É—î–º–æ fallback
              if (modelPath !== 'House.glb') {
                console.log('üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ fallback –º–æ–¥–µ–ª—å House.glb');
                this.load('House.glb').then(resolve).catch(reject);
              } else {
                reject(error);
              }
            });
            return;
          } else {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${modelPath}:`, error);
          }
          
          // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ fallback –º–æ–¥–µ–ª—å
          if (modelPath !== 'House.glb') {
            console.log('üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ fallback –º–æ–¥–µ–ª—å House.glb');
            this.load('House.glb').then(resolve).catch(reject);
          } else {
            reject(error);
          }
        }
      );
    });
  }
  
  async loadWithoutDraco(modelPath) {
    return new Promise((resolve, reject) => {
      console.log(`üîß –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${modelPath} –±–µ–∑ DRACO –ø—ñ–¥—Ç—Ä–∏–º–∫–∏...`);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π loader –±–µ–∑ DRACO
      const simpleLoader = new GLTFLoader();
      
      simpleLoader.load(
        modelPath,
        (gltf) => {
          const model = gltf.scene;
          
          if (!model || !model.children || model.children.length === 0) {
            console.warn(`–ú–æ–¥–µ–ª—å ${modelPath} –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä—ñ—ó`);
          }
          
          // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
          this.optimizeModel(model);
          
          // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
          this.loadedModels.set(modelPath + '_no_draco', model.clone());
          
          console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelPath} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –±–µ–∑ DRACO (${model.children.length} –æ–±'—î–∫—Ç—ñ–≤)`);
          resolve(model);
        },
        (progress) => {
          if (progress.total > 0) {
            const percent = (progress.loaded / progress.total * 100).toFixed(0);
            console.log(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–∑ DRACO ${modelPath}: ${percent}%`);
          }
        },
        (error) => {
          console.error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ${modelPath} –Ω–∞–≤—ñ—Ç—å –±–µ–∑ DRACO:`, error);
          reject(error);
        }
      );
    });
  }
  
  optimizeModel(model) {
    model.traverse((child) => {
      if (child.isMesh) {
        // –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è frustum culling
        child.frustumCulled = true;
        
        // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
        if (child.material) {
          if (Array.isArray(child.material)) {
            child.material.forEach(mat => this.optimizeMaterial(mat));
          } else {
            this.optimizeMaterial(child.material);
          }
        }
        
        // –û–±—á–∏—Å–ª–µ–Ω–Ω—è bounding box
        if (child.geometry) {
          child.geometry.computeBoundingBox();
          child.geometry.computeBoundingSphere();
        }
      }
    });
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–µ —Å–≤—ñ—Ç–ª–æ –∑ –º–æ–¥–µ–ª—ñ
    this.removeExistingLights(model);
    
    // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    this.centerModel(model);
  }
  
  removeExistingLights(model) {
    const lightsToRemove = [];
    
    model.traverse((child) => {
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ —Å–≤—ñ—Ç–µ–ª –∑ –º–æ–¥–µ–ª—ñ
      if (child.isLight || 
          child.isDirectionalLight || 
          child.isPointLight || 
          child.isSpotLight ||
          child.isAmbientLight ||
          child.isHemisphereLight) {
        
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ —Å–≤—ñ—Ç–ª–æ: ${child.name || child.type}`);
        lightsToRemove.push(child);
      }
      
      // –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –æ–±'—î–∫—Ç–∏ –∑ –Ω–∞–∑–≤–∞–º–∏ —Å–≤—ñ—Ç–µ–ª
      if (child.name && (
          child.name.toLowerCase().includes('light') ||
          child.name.toLowerCase().includes('lamp') ||
          child.name.toLowerCase().includes('bulb')
      )) {
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ —Å–≤—ñ—Ç–ª–æ–≤–∏–π –æ–±'—î–∫—Ç: ${child.name}`);
        lightsToRemove.push(child);
      }
    });
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å–≤—ñ—Ç–ª–∞
    lightsToRemove.forEach(light => {
      if (light.parent) {
        light.parent.remove(light);
      }
    });
    
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${lightsToRemove.length} —Å–≤—ñ—Ç–ª–æ–≤–∏—Ö –æ–±'—î–∫—Ç—ñ–≤`);
  }
  
  optimizeMaterial(material) {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    material.side = material.side || THREE.FrontSide;
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–º—ñ—Å–∏–≤–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –¥–ª—è bloom –µ—Ñ–µ–∫—Ç—É
    if (!material.emissive) {
      material.emissive = new THREE.Color(0x000000);
      material.emissiveIntensity = 0;
    }
  }
  
  centerModel(model) {
    const box = new THREE.Box3().setFromObject(model);
    const center = box.getCenter(new THREE.Vector3());
    const size = box.getSize(new THREE.Vector3());
    
    // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    model.position.x = -center.x;
    model.position.y = -center.y;
    model.position.z = -center.z;
    
    // –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –Ω–∞ 10% –≤–∏—Å–æ—Ç–∏ –º–æ–¥–µ–ª—ñ
    model.position.y += size.y * 0.2;
    
    // –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
    const maxDimension = Math.max(size.x, size.y, size.z);
    const targetSize = 5; // –¶—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä
    
    if (maxDimension > 0) {
      const scale = targetSize / maxDimension;
      model.scale.setScalar(scale);
    }
    
    console.log(`–ú–æ–¥–µ–ª—å —Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∞ —Ç–∞ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∞. –†–æ–∑–º—ñ—Ä: ${size.x.toFixed(2)} x ${size.y.toFixed(2)} x ${size.z.toFixed(2)}`);
  }
  
  preloadModels(modelPaths) {
    // –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    const loadPromises = modelPaths.map(path => 
      this.load(path).catch(error => {
        console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ${path}:`, error);
        return null;
      })
    );
    
    return Promise.allSettled(loadPromises);
  }
  
  clearCache() {
    this.loadedModels.forEach((model, path) => {
      // –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
      model.traverse((child) => {
        if (child.isMesh) {
          if (child.geometry) child.geometry.dispose();
          if (child.material) {
            if (Array.isArray(child.material)) {
              child.material.forEach(mat => mat.dispose());
            } else {
              child.material.dispose();
            }
          }
        }
      });
    });
    
    this.loadedModels.clear();
    console.log('–ö–µ—à –º–æ–¥–µ–ª–µ–π –æ—á–∏—â–µ–Ω–æ');
  }
  
  getLoadedModels() {
    return Array.from(this.loadedModels.keys());
  }
  
  // üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
  async loadFromFile(file) {
    return new Promise((resolve, reject) => {
      if (!file) {
        reject(new Error('–ù–µ –≤–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª'));
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
      const validTypes = ['.glb', '.gltf'];
      const fileName = file.name.toLowerCase();
      const isValidType = validTypes.some(type => fileName.endsWith(type));
      
      if (!isValidType) {
        reject(new Error('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ .glb —Ç–∞ .gltf —Ñ–∞–π–ª–∏'));
        return;
      }
      
      console.log(`üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
      
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –¥–ª—è —Ñ–∞–π–ª—É
      const fileURL = URL.createObjectURL(file);
      
      // Timeout –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const timeoutId = setTimeout(() => {
        URL.revokeObjectURL(fileURL);
        reject(new Error(`Timeout –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${file.name}`));
      }, this.loadTimeout);
      
      this.loader.load(
        fileURL,
        (gltf) => {
          const model = gltf.scene;
          
          if (!model || !model.children || model.children.length === 0) {
            console.warn(`–ú–æ–¥–µ–ª—å ${file.name} –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä—ñ—ó`);
          }
          
          // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
          this.optimizeModel(model);
          
          // –û—á–∏—â–µ–Ω–Ω—è URL
          URL.revokeObjectURL(fileURL);
          clearTimeout(timeoutId);
          
          // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–µ—à –∑ –Ω–∞–∑–≤–æ—é —Ñ–∞–π–ª—É
          const cacheKey = `file_${file.name}_${Date.now()}`;
          this.loadedModels.set(cacheKey, model.clone());
          
          console.log(`‚úÖ –§–∞–π–ª ${file.name} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (${model.children.length} –æ–±'—î–∫—Ç—ñ–≤)`);
          resolve(model);
        },
        (progress) => {
          if (progress.total > 0) {
            const percent = (progress.loaded / progress.total * 100).toFixed(0);
            console.log(`üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${file.name}: ${percent}%`);
          }
        },
        (error) => {
          URL.revokeObjectURL(fileURL);
          clearTimeout(timeoutId);
          
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${file.name}:`, error);
          reject(error);
        }
      );
    });
  }
}